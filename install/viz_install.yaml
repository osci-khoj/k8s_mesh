---
###
### Linkerd Viz Extension Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/inject: enabled
---
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["split.smi-spec.io"]
  resources: ["trafficsplits"]
  verbs: ["list", "get", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-metrics-api
subjects:
- kind: ServiceAccount
  name: metrics-api
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
###
### Grafana RBAC
###
kind: ServiceAccount
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
---
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "pods"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
---
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRRHM1VVRQZTdOcXhpajVFdWYxT1BoakFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl4TURreU5ERTBORGMxTlZvWApEVEl5TURreU5ERTBORGMxTlZvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBSzZnSUkxNmtSYTcxMU41QmZWbWdhR1gKVXVkWVJXcE9UK01VVURWc1dYNDJSQkNxOTJxbkNuRkZ0MTlCTnZKeG5NT3NFdVB1WjU5cUR3T3NjMEpoOFo1RgoxcE5RSWowajBpRDZ1WFJ4K2t6VWk0VStNUEpvUVdWdnhlVnZDQUZhZFJPcjdYY3N1ZkczdklhS25pYnpIdkgvCjRqT1VXS05YcWhtUXkxRytRM1FCNHhuWDZPOEN3NnRGL05YWW9EclJ3WEVRSFc3M2xHODRIdkduREFxYnpQSVMKaXZ0MkgxTXVTVW1rWWpOTlpsT0VUK05WU1hCaTF5WXRONTVsNEQvTFZqNUd0c2VNSDBvdVV4dWxvWnZoYy9EeApyTldydmp2NVZkY2gzTkdIeVFiTmdKUmRJYnhTK1JXUnZJVCtUdjZQSkRTQ1BwZ2lwaG1odDgzR05ONDllajhDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFHczRaQWFhOWgxSkNyaHNqUC84WG1keUNZYXNjaUJiClo3ZUdTYUdoeENnMWdBK2xoNzAvaW9FMEpYMG1ONWd6aU5hcENTSjJlb1p0Z0RISENHa3hhdnVzSG8yaEZLTUQKVXpQQzRVVFpsenl6b0JhdWJuZHNFb0RncC9VSFlwdGNJMlM3UTdKQ2k5dFlhS05TNGJvM1YwSGdBWEpYRE9GcQpvSkJsUU1JZXRscjhrbGV1VUUxdWRSZkpLU3Z0RE16aHVycjJTazc5amJlSm03Tjdpcit6aFdvNHRJV2lJcFpnCjNlc1R2OWRpQTN0aTZ0cWdhZWx5UTU4SlVHWWFlRmVNN1FJaW5TdHNEd3ZwY2dxemh4UW1GbS8xUnM1OEhDOEEKV2xUdmw2S1RYWFZZK2NCMmpaK0ZrUCs5YXF2WHRUcWRnZFBuNDU5RHNuQXU5NGtQR2p6OHRnQT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBcnFBZ2pYcVJGcnZYVTNrRjlXYUJvWmRTNTFoRmFrNVA0eFJRTld4WmZqWkVFS3IzCmFxY0tjVVczWDBFMjhuR2N3NndTNCs1bm4yb1BBNnh6UW1IeG5rWFdrMUFpUFNQU0lQcTVkSEg2VE5TTGhUNHcKOG1oQlpXL0Y1VzhJQVZwMUU2dnRkeXk1OGJlOGhvcWVKdk1lOGYvaU01UllvMWVxR1pETFViNURkQUhqR2Rmbwo3d0xEcTBYODFkaWdPdEhCY1JBZGJ2ZVViemdlOGFjTUNwdk04aEtLKzNZZlV5NUpTYVJpTTAxbVU0UlA0MVZKCmNHTFhKaTAzbm1YZ1A4dFdQa2EyeDR3ZlNpNVRHNldobStGejhQR3MxYXUrTy9sVjF5SGMwWWZKQnMyQWxGMGgKdkZMNUZaRzhoUDVPL284a05JSSttQ0ttR2FHM3pjWTAzajE2UHdJREFRQUJBb0lCQUMxVGpQK01KK3JodVFPRwpyMkJDU2pXYVpMOTk3dzZuNHg2TElFS3RyQkVSbnR0QXRWWHVvOHhCRDFiZlE1YnNuSWRCdSttRDhVdTBxTThJClRTYVc2N05zWjBUM2tOdVQxN0FOeEdPUVRpcnhKSUhpWWF3YUdaZHR5czFCNDY4T1BzTnJaZ2tBQ0FmUTdGTnoKMlpjOGxmUzB1WTh2MjA0U3JDbFVweUhCcEJxUkVRVjBZVWVjcFRoVG9JSWZyay9Fd3NHSUhJcndCQzV3b3J4NgpIUytpeDFNZmxsT1VmL3ZlSGlNRmh0WDdyblFUVmJYNWVnREdray9QQTl4ZkNQNEpUMjBoNUI3dTAxczhzdlR5CmMxeEI2anFSb0ZMQ0Jyenc0czFHL2Z4WFgzY0NwQ2oyUGxoeUc3TjkwYUx5UzB1elVUVmN4VGFGMC9DbWxScUsKVHVEaVpwRUNnWUVBelZtQ2JHWVJaRVdFZ2pVcHNKb3pGdDZrQ1dUUHozZmVPdFFtZUY5N3RXRFN1T01SckwvSAp5YVZpQng4UXZPdG1sN1FCeFloeHBFRGp2Y21IbXVRenR1Y3dlVmd0M1M1SjQ2eGc1WmppQi9CY1N5MWlQZWlXClNGK2J4UDNsQW9uSlIxcy9CU0hNYjhQeG1saTZCVDBqRHdEN0tXbUlnRW9GSFdFNzhMY25Wb2tDZ1lFQTJiS1cKakROK3lwdUxJNlhQN3FDZVl6UnRkakJtMXB5bkxqY2FYbGFZWFcwOCtEb21hL3FQY25UZjYvNTd0Zm54NWxYMApWSU05ZDF6L1lSSG9yZTdNUWRWam1vQlFkREQ5aE9vK1ZYeVhHQ1E0MFBDSVV1RERnWTJXdjVxY0JXN1MyRXhFCjM2RWdFS0dXcW1welc2WWszelhCV0JuVmN2MlVMZTdyVDd6U0dJY0NnWUFMVnUwSDFWOFNmWEJDekhLLzZOUDMKYUZZQW1zdUs5bUNVT1JEaXhzc0xDZ3k0M3ZrajQvZEJZRnVZYnhPNml2bEFXVlZidGh3b2FOanFxdzFNOVZzUgp0NVNLcnQ3aGZ1UGZxYTQwSDR3anloY2VvNlB3TFQ3WFFraFV5WHh5OW03aC9OenZDSjNFY2pxT1BtWVBVZi8wCm5TWkJkQzF3Z0NYbUtHOXA3SU5FbVFLQmdESDQ4TjRXSkJEV1M4WlBGY0F0VnE1bkpvbHU2dXh3NFYrV2ZwTVIKUmNDTWh1WmtVdFdPbXNjblZRK1RSMHFxcVlDNlVtL2tBSVFaOFBXVGF0b2lhdmpoeHc5OFRQdWZFMU1qZ2xPVgpXZ25NcHM0dnFOdDloT09FWVFweXIwWC8vcDV3UTQ4aUtYNG4yYkljNVlZd1NWNkR0SEpJMjlxZG94bzRNZ1FICjBDS1pBb0dBTnRjTDBIRWUvbHA3Mm10d2dHZGY1dDhmamE2d01vaDF3Z0tBRGg0Ykh5NzBBVXNseTk1U3JNelMKY205ZlNGZWpqVlhwUGlRczdVT2NNNFBIZkdXM3lURkZHWHdaaWgwQ01qajRUNmdBaTN4M1ZKdzVzcGdGYWorMQpPY3FoVG02eEFhQVEzN1hrZXdJNzdYRFVBWGhXL2NRTUpLR2cvTFppdW9DZ1lZbmZCUTg9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRRHM1VVRQZTdOcXhpajVFdWYxT1BoakFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl4TURreU5ERTBORGMxTlZvWApEVEl5TURreU5ERTBORGMxTlZvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBSzZnSUkxNmtSYTcxMU41QmZWbWdhR1gKVXVkWVJXcE9UK01VVURWc1dYNDJSQkNxOTJxbkNuRkZ0MTlCTnZKeG5NT3NFdVB1WjU5cUR3T3NjMEpoOFo1RgoxcE5RSWowajBpRDZ1WFJ4K2t6VWk0VStNUEpvUVdWdnhlVnZDQUZhZFJPcjdYY3N1ZkczdklhS25pYnpIdkgvCjRqT1VXS05YcWhtUXkxRytRM1FCNHhuWDZPOEN3NnRGL05YWW9EclJ3WEVRSFc3M2xHODRIdkduREFxYnpQSVMKaXZ0MkgxTXVTVW1rWWpOTlpsT0VUK05WU1hCaTF5WXRONTVsNEQvTFZqNUd0c2VNSDBvdVV4dWxvWnZoYy9EeApyTldydmp2NVZkY2gzTkdIeVFiTmdKUmRJYnhTK1JXUnZJVCtUdjZQSkRTQ1BwZ2lwaG1odDgzR05ONDllajhDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFHczRaQWFhOWgxSkNyaHNqUC84WG1keUNZYXNjaUJiClo3ZUdTYUdoeENnMWdBK2xoNzAvaW9FMEpYMG1ONWd6aU5hcENTSjJlb1p0Z0RISENHa3hhdnVzSG8yaEZLTUQKVXpQQzRVVFpsenl6b0JhdWJuZHNFb0RncC9VSFlwdGNJMlM3UTdKQ2k5dFlhS05TNGJvM1YwSGdBWEpYRE9GcQpvSkJsUU1JZXRscjhrbGV1VUUxdWRSZkpLU3Z0RE16aHVycjJTazc5amJlSm03Tjdpcit6aFdvNHRJV2lJcFpnCjNlc1R2OWRpQTN0aTZ0cWdhZWx5UTU4SlVHWWFlRmVNN1FJaW5TdHNEd3ZwY2dxemh4UW1GbS8xUnM1OEhDOEEKV2xUdmw2S1RYWFZZK2NCMmpaK0ZrUCs5YXF2WHRUcWRnZFBuNDU5RHNuQXU5NGtQR2p6OHRnQT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["policy"]
  resources: ["podsecuritypolicies"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: viz-psp
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    namespace: linkerd-viz
roleRef:
  kind: Role
  name: psp
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
- kind: ServiceAccount
  name: grafana
  namespace: linkerd-viz
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.2
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: 0d5b035f4d141dc2c13e1f89046de78fe0fb1208075734c3977400b866f2db51
        linkerd.io/created-by: linkerd/helm stable-2.10.2
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - -controller-namespace=linkerd
        - -log-level=info
        - -cluster-domain=cluster.local
        - -prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090
        image: cr.l5d.io/linkerd/metrics-api:stable-2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: metrics-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: metrics-api
---
###
### Grafana
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: grafana-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
data:
  grafana.ini: |-
    instance_name = grafana
    [server]
    root_url = %(protocol)s://%(domain)s:/grafana/
    [auth]
    disable_login_form = true
    [auth.anonymous]
    enabled = true
    org_role = Editor
    [auth.basic]
    enabled = false
    [analytics]
    check_for_updates = false
    [panels]
    disable_sanitize_html = true
  datasources.yaml: |-
    apiVersion: 1
    datasources:
    - name: prometheus
      type: prometheus
      access: proxy
      orgId: 1
      url: http://prometheus.linkerd-viz.svc.cluster.local:9090
      isDefault: true
      jsonData:
        timeInterval: "5s"
      version: 1
      editable: true

  dashboards.yaml: |-
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: true
      editable: true
      options:
        path: /var/lib/grafana/dashboards
        homeDashboardId: linkerd-top-line
---
kind: Service
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: grafana
  ports:
  - name: http
    port: 3000
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.2
    component: grafana
    namespace: linkerd-viz
  name: grafana
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: grafana
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.2
      labels:
        linkerd.io/extension: viz
        component: grafana
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - env:
        - name: GF_PATHS_DATA
          value: /data
        # Force using the go-based DNS resolver instead of the OS' to avoid failures in some environments
        # see https://github.com/grafana/grafana/issues/20096
        - name: GODEBUG
          value: netdns=go
        image: cr.l5d.io/linkerd/grafana:stable-2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
        name: grafana
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
        resources:
        securityContext:
          runAsUser: 472
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/grafana
          name: grafana-config
          readOnly: true
      serviceAccountName: grafana
      volumes:
      - emptyDir: {}
        name: data
      - configMap:
          items:
          - key: grafana.ini
            path: grafana.ini
          - key: datasources.yaml
            path: provisioning/datasources/datasources.yaml
          - key: dashboards.yaml
            path: provisioning/dashboards/dashboards.yaml
          name: grafana-config
        name: grafana-config
---
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    - job_name: 'grafana'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names: ['linkerd-viz']
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        action: keep
        regex: ^grafana$

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'linkerd-viz'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.2
    component: prometheus
    namespace: linkerd-viz
  name: prometheus
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.2
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      securityContext:
        fsGroup: 65534
      containers:
      - args:
        - --log.level=info
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        image: prom/prometheus:v2.19.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
          readOnly: true
      serviceAccountName: prometheus
      volumes:
      - name: data
        emptyDir: {}
      - configMap:
          name: prometheus-config
        name: prometheus-config
---
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.2
    component: tap
    namespace: linkerd-viz
  name: tap
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: c4a5b3a7d9b2c5fd088746fd03311cbb4b068c58512361f83e412e98865ccc31
        linkerd.io/created-by: linkerd/helm stable-2.10.2
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - api
        - -api-namespace=linkerd
        - -log-level=info
        - -identity-trust-domain=cluster.local
        image: cr.l5d.io/linkerd/tap:stable-2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap
      volumes:
      - name: tls
        secret:
          secretName: tap-k8s-tls
---
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
- kind: ServiceAccount
  name: tap-injector
  namespace: linkerd-viz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRZWxRT1J2M3o0eXUwQXFwVmlVc3NrakFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl4TURreQpOREUwTkRjMU5sb1hEVEl5TURreU5ERTBORGMxTmxvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU45TXdhOTVaTWJwWW93WlZuQ2p4d2p6RVJMV1h1L2poU1UraEtaZ0d2c2hOTzZ6KzJQWHJ0cUNwclI5UEg4NApQTmt4Zm9FRU0vczVta3VtZ3N5S0s5VS9Ob3pEZTc2MkxLbTU4d1ZsNUhzR3VON1Q1NzUyRi8zemNDciszam1GCm0vN3haRVpRVGV0Y3doZjN4NkY3TXAvRGx3eUxPRk5Oc0RlR2M1Q0xTckVIYXZoNGhRMmpsK3RiLzc4ZW05RXoKYlZjQlE5eGxJUWtFdnBxQnhCUVNxZlhVV2dZaXJvTHRFbkQ2WlhSbTA5ZDkrNHMweWdCSGpueUxDcEdReEZWWgp2RGZQaE53UGEvWTFFVVBobGdYN25oZURhdGxleStJNzMxRVRBSStYdHNlTm9nZDhuQkQ4QzlTZmxndmZxN0V0ClcybCsrcEwvY1RJOGN0ZkdPWTd6QjhrQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBQ1plNVBFWjhwSzd0eVEvY1ZFRGhtdjhOYVgwajU2MzRMQWJ1RWhCa2lONVgxYnd4czhMSWl0clRGTE0KSEZxL2pnZHpLK2VoN1VtZkhLV3BsVzdVNHphOElEMUR3V2txcnB0cUVRWmVVWFN3N3FaV1puL203TFc0WjF1Sgo4U1JNaWVqNXNnQXIvWmcraHNCai9pbzJQR1E0L3g0NXZ2WVhmUVhTTUFaQWEwMHFWYUlxbjZEdDBjWm1md0RQCkY4dHpaZWlzbStLK3lXWk41S2kvSzMzNG4vZ05tZ2p2bWtheXZoK2NybmE3N0pZQkZQNWRSOXlUY3M4b3JpbGQKZlZuRVc1ek9WZFN1YTg4WnFqUGdITzVYNlJlVTFBLzFpS1d6U3JRdHRiTEFqSUUvbEpjelhOVE9vMnBIbHVENwpVVWVCd1RCdUU0VStST1ZtREZUUnRMZ0w3TGs9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMzB6QnIzbGt4dWxpakJsV2NLUEhDUE1SRXRaZTcrT0ZKVDZFcG1BYSt5RTA3clA3Clk5ZXUyb0ttdEgwOGZ6ZzgyVEYrZ1FReit6bWFTNmFDeklvcjFUODJqTU43dnJZc3FibnpCV1hrZXdhNDN0UG4Kdm5ZWC9mTndLdjdlT1lXYi92RmtSbEJONjF6Q0YvZkhvWHN5bjhPWERJczRVMDJ3TjRaemtJdEtzUWRxK0hpRgpEYU9YNjF2L3Z4NmIwVE50VndGRDNHVWhDUVMrbW9IRUZCS3A5ZFJhQmlLdWd1MFNjUHBsZEdiVDEzMzdpelRLCkFFZU9mSXNLa1pERVZWbThOOCtFM0E5cjlqVVJRK0dXQmZ1ZUY0TnEyVjdMNGp2ZlVSTUFqNWUyeDQyaUIzeWMKRVB3TDFKK1dDOStyc1MxYmFYNzZrdjl4TWp4eTE4WTVqdk1IeVFJREFRQUJBb0lCQUYyMmFOS3JyNCtMQXNDcApJWTNFTGhPamJ0YnBBSTdNZldSVUNIZUtmY2hHOTEvMlNOcHQrZ1BhTVB3dVV1VlJSTGdoL1dWSHprandzOEJyCjhSakdJLzhxdUVuN0FFUFpVSVVxZE1NZkwvUXhyZ1JXQ2p2MGM3MHdIVEx1STNVZ2pZZEE1MFJiRDFoblpVMkoKdjA0VjFma1dySjJuRDh4bUhqNHZQdkM2aEc0bVZjRS9IY0Q3ZDhOcDcxWVdXWEVwMmZaVU43alN0dzZxU2dUcQppN3k5dUhHeXlHTTVpek53THJiZDUrblYxbFRmRmkzQUgzVW5JcTN1L3ptOW1tNlZ5Vi9uTWxhOXZTTEJtMmtLCm96cG9USy9sV2tXTmhPN20rN3VML1FrY0R4eWZiaHdpTGJxU3VHT3ZNbWo5U0w0bWtmVGV2dWg3R1pndkN1eHgKaFU4Y05jRUNnWUVBL2dXVG54YmRpb1hyT09Qb1A2NlhKdEZ4d243YjNrYmFXVTllM1Jaem9MNzcxYjY1bThjSQoxM0J2bGpiaGZQTnpXRG1pNktGZ3ZIeDAwdjFNOUZYRFhBemsxdVFaaWZwY0RCOFVWNWJpS0QydWJ2RHkvLzByCmlqZzJZQWJRT1NESnFROW4wNmU3bUF1NGE2QXgxcGhIZE9Ld3ZEczJtSlNnUXhLbHNaZktPSk1DZ1lFQTRRbnUKbG5BUGlnNU41eXdzaVFwT0lzZEF2aWRoTTQ0dHZYYTZnQ3BiK05hSldDUS9GMkR4S3JRcy83ZW95QjlEUm10cwpoc2FqNFhEMGxqYWZFRjV6SjlKTlB3b2c0cmxLWGovL25XYUE1WGVzRlpINUJ3MERiUXpnUlRKUm5aYllJRk9FCmlHZDE0MnNDcU8zOWZaS1RQeTIrSCtVclEvV0xMaXlEWm5PbFE3TUNnWUVBMmtRQWJCcEJrZDB3R0ZuOEhYdnUKOUxQU2c4UnRON2k1dFRPMTExS0xWL3ZDZUE3QmZWQ3dFQzNVTThaRVNoRUZjekZUQVlCb2xveDU5VEVoQm5FSwp3L1Z3VEJVQ3ZNUWFnMi9SRXRIYTBhanVVUFZJVngwNlpER1l4em9UZ0lManhCZ3dwblRoZyt2T011d2E1c0ZCCjVQVkQxdmtxR0VEYzA4VWFDbGJhczNFQ2dZRUF2VU1ySTk3UFV0N0E2aUdldXdxdHVGWTN2elZEYktheEZWMWIKY1JzdkN0THo0K3RvSEhOdG9PcXp4Y1ZpOEJ4SzZsakNoMzljcU9mazdNaTNjbjdjL3FyQ1NMaHQvQUMxNlJxTwpFb1Q0OXdSMCtCY3loNW1NUGhUTU1hWW1PaEY1WjRhV09sbzVMYkQ4SmJNeXRIK24wMFRYVjkvWFNXcWpTWXdxClh1bjRIajBDZ1lFQThuVkFpY3VhbUthODlFcXRhYUd1ekxyanM2dU1BbmRna3Ezb1VyWDFWbFlra0lYeFlpeC8KOEhHZDZTcWZWeC8rblZqelhsa3REdGVneUpMNHRCLzQ2YkpQRUUyM0lHZ2FIYlgrUWMwRVFlQWhyZEtpdUl2QQpKbzFOeDdRTERGRlpvK0EwdVVlYWlRdGkwaVFaSjJ2cjJ4OUhRMS9mK2R6TGZCbmhTRGF3cEJvPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
- name: tap-injector.linkerd.io
  clientConfig:
    service:
      name: tap-injector
      namespace: linkerd-viz
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRZWxRT1J2M3o0eXUwQXFwVmlVc3NrakFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl4TURreQpOREUwTkRjMU5sb1hEVEl5TURreU5ERTBORGMxTmxvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU45TXdhOTVaTWJwWW93WlZuQ2p4d2p6RVJMV1h1L2poU1UraEtaZ0d2c2hOTzZ6KzJQWHJ0cUNwclI5UEg4NApQTmt4Zm9FRU0vczVta3VtZ3N5S0s5VS9Ob3pEZTc2MkxLbTU4d1ZsNUhzR3VON1Q1NzUyRi8zemNDciszam1GCm0vN3haRVpRVGV0Y3doZjN4NkY3TXAvRGx3eUxPRk5Oc0RlR2M1Q0xTckVIYXZoNGhRMmpsK3RiLzc4ZW05RXoKYlZjQlE5eGxJUWtFdnBxQnhCUVNxZlhVV2dZaXJvTHRFbkQ2WlhSbTA5ZDkrNHMweWdCSGpueUxDcEdReEZWWgp2RGZQaE53UGEvWTFFVVBobGdYN25oZURhdGxleStJNzMxRVRBSStYdHNlTm9nZDhuQkQ4QzlTZmxndmZxN0V0ClcybCsrcEwvY1RJOGN0ZkdPWTd6QjhrQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBQ1plNVBFWjhwSzd0eVEvY1ZFRGhtdjhOYVgwajU2MzRMQWJ1RWhCa2lONVgxYnd4czhMSWl0clRGTE0KSEZxL2pnZHpLK2VoN1VtZkhLV3BsVzdVNHphOElEMUR3V2txcnB0cUVRWmVVWFN3N3FaV1puL203TFc0WjF1Sgo4U1JNaWVqNXNnQXIvWmcraHNCai9pbzJQR1E0L3g0NXZ2WVhmUVhTTUFaQWEwMHFWYUlxbjZEdDBjWm1md0RQCkY4dHpaZWlzbStLK3lXWk41S2kvSzMzNG4vZ05tZ2p2bWtheXZoK2NybmE3N0pZQkZQNWRSOXlUY3M4b3JpbGQKZlZuRVc1ek9WZFN1YTg4WnFqUGdITzVYNlJlVTFBLzFpS1d6U3JRdHRiTEFqSUUvbEpjelhOVE9vMnBIbHVENwpVVWVCd1RCdUU0VStST1ZtREZUUnRMZ0w3TGs9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
  - name: tap-injector
    port: 443
    targetPort: tap-injector
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: c2b8e282e0e668eadebc11a90ec47ab3a15b0191319e27c0d464a5665f7f8fee
        linkerd.io/created-by: linkerd/helm stable-2.10.2
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - injector
        - -tap-service-name=tap.linkerd-viz.serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - -log-level=info
        image: cr.l5d.io/linkerd/tap:stable-2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: tap-injector
        ports:
        - containerPort: 8443
          name: tap-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap-injector
      volumes:
      - name: tls
        secret:
          secretName: tap-injector-k8s-tls
---
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.2
    component: web
    namespace: linkerd-viz
  name: web
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.2
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - -linkerd-controller-api-addr=linkerd-controller-api.linkerd.svc.cluster.local:8085
        - -linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -grafana-addr=grafana.linkerd-viz.svc.cluster.local:3000
        - -controller-namespace=linkerd
        - -viz-namespace=linkerd-viz
        - -log-level=info
        - -enforced-host=^(localhost|127\.0\.0\.1|web\.linkerd-viz\.svc\.cluster\.local|web\.linkerd-viz\.svc|\[::1\])(:\d+)?$
        image: cr.l5d.io/linkerd/web:stable-2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: web
